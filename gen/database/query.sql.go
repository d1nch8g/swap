// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, card, verified)
VALUES ($1, $2, $3)
RETURNING id, email, card, verified
`

type CreateUserParams struct {
	Email    string
	Card     string
	Verified bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Card, arg.Verified)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Card,
		&i.Verified,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, card, verified
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Card,
		&i.Verified,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, card, verified
FROM users
ORDER BY card
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Card,
			&i.Verified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
set email = $2,
  card = $3,
  verified = $4
WHERE id = $1
RETURNING id, email, card, verified
`

type UpdateUserParams struct {
	ID       int64
	Email    string
	Card     string
	Verified bool
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Card,
		arg.Verified,
	)
	return err
}
